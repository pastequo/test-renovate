// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/assisted-service/internal/controller/controllers (interfaces: BMOUtils)

// Package controllers is a generated GoMock package.
package controllers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBMOUtils is a mock of BMOUtils interface.
type MockBMOUtils struct {
	ctrl     *gomock.Controller
	recorder *MockBMOUtilsMockRecorder
}

// MockBMOUtilsMockRecorder is the mock recorder for MockBMOUtils.
type MockBMOUtilsMockRecorder struct {
	mock *MockBMOUtils
}

// NewMockBMOUtils creates a new mock instance.
func NewMockBMOUtils(ctrl *gomock.Controller) *MockBMOUtils {
	mock := &MockBMOUtils{ctrl: ctrl}
	mock.recorder = &MockBMOUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBMOUtils) EXPECT() *MockBMOUtilsMockRecorder {
	return m.recorder
}

// ConvergedFlowAvailable mocks base method.
func (m *MockBMOUtils) ConvergedFlowAvailable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvergedFlowAvailable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ConvergedFlowAvailable indicates an expected call of ConvergedFlowAvailable.
func (mr *MockBMOUtilsMockRecorder) ConvergedFlowAvailable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvergedFlowAvailable", reflect.TypeOf((*MockBMOUtils)(nil).ConvergedFlowAvailable))
}

// GetIronicIPs mocks base method.
func (m *MockBMOUtils) GetIronicIPs() ([]string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIronicIPs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIronicIPs indicates an expected call of GetIronicIPs.
func (mr *MockBMOUtilsMockRecorder) GetIronicIPs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIronicIPs", reflect.TypeOf((*MockBMOUtils)(nil).GetIronicIPs))
}

// getICCConfig mocks base method.
func (m *MockBMOUtils) getICCConfig(arg0 context.Context) (*ICCConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getICCConfig", arg0)
	ret0, _ := ret[0].(*ICCConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getICCConfig indicates an expected call of getICCConfig.
func (mr *MockBMOUtilsMockRecorder) getICCConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getICCConfig", reflect.TypeOf((*MockBMOUtils)(nil).getICCConfig), arg0)
}
